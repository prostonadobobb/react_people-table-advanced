{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/TableColumn.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/ErrorPage.tsx","components/HomePage.tsx","Root.tsx","index.tsx"],"names":["Navbar","activePage","isActive","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuries","sex","All","Male","Female","PeopleFilters","setSearchParams","getCurrentCenturies","useCallback","century","centeriesFromSearch","getAll","includes","filter","param","handleQueryChange","text","length","map","classNames","get","type","placeholder","onChange","e","target","query","Loader","PersonLink","person","name","slug","TableColumn","title","toUpperCase","slice","prevSort","prevOrder","sort","order","getNewParams","COLUMNS","PeopleTable","people","peopleSlug","useParams","column","born","died","mother","motherName","undefined","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","preparePeople","input","find","isSexValid","isCenturyValid","Math","ceil","isNameValid","toLowerCase","person1","person2","field1","field2","localeCompare","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","preparedPeople","useMemo","filterParams","isDataEmpty","isDataPrepared","useEffect","getPeople","data","catch","finally","ErrorPage","HomePage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fbfe287d.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const activePage = ({ isActive }: { isActive: boolean }) => {\n    return `navbar-item ${isActive ? 'has-background-grey-lighter' : ''}`;\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n\n          <NavLink to=\"/\" className={activePage}>Home</NavLink>\n\n          <NavLink to=\"/people\" className={activePage}>People</NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nconst centuries = [16, 17, 18, 19, 20];\nconst sex = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const getCurrentCenturies = useCallback((century: string) => {\n    const centeriesFromSearch = searchParams.getAll('centuries');\n\n    if (centeriesFromSearch.includes(century)) {\n      return centeriesFromSearch.filter(param => param !== century);\n    }\n\n    return [...centeriesFromSearch, century];\n  }, [searchParams]);\n\n  const handleQueryChange = useCallback((text: string) => {\n    if (!text.length) {\n      searchParams.delete('input');\n      setSearchParams(searchParams);\n\n      return;\n    }\n\n    searchParams.set('input', text);\n    setSearchParams(searchParams);\n  }, [searchParams, setSearchParams]);\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(sex).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            className={classNames({\n              'is-active': searchParams.get('sex') === value,\n            })}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(e) => handleQueryChange(e.target.value)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': searchParams\n                    .getAll('centuries')\n                    .includes(century.toString()),\n                })}\n                params={{ centuries: getCurrentCenturies(century.toString()) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': searchParams\n                  .getAll('centuries')\n                  .length !== 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person,\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\ninterface Props {\n  title: string\n}\n\nexport const TableColumn: React.FC<Props> = ({ title }) => {\n  const [searchParams] = useSearchParams();\n  const getIconClass = () => {\n    return classNames('fas', {\n      'fa-sort': (!searchParams.get('sort') && !searchParams.get('order'))\n        || (searchParams.get('sort') !== title),\n      'fa-sort-up': searchParams.get('sort') === title\n        && !searchParams.get('order'),\n      'fa-sort-down': searchParams.get('sort') === title\n        && searchParams.get('order'),\n    });\n  };\n\n  const getNewParams = () => {\n    const prevSort = searchParams.get('sort');\n    const prevOrder = searchParams.get('order');\n    let sort = null;\n    let order = null;\n\n    if (prevSort !== title) {\n      sort = title;\n    }\n\n    if (prevSort === title) {\n      sort = prevSort;\n      order = 'desc';\n    }\n\n    if (prevSort === title && prevOrder) {\n      sort = null;\n      order = null;\n    }\n\n    return {\n      sort,\n      order,\n    };\n  };\n\n  return (\n    <th>\n      <span className=\"is-flex is-flex-wrap-nowrap\">\n        {title[0].toUpperCase() + title.slice(1)}\n        <SearchLink\n          params={getNewParams()}\n          className=\"px-2\"\n        >\n          <i className={getIconClass()} />\n        </SearchLink>\n      </span>\n    </th>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { TableColumn } from './TableColumn';\n\ntype Props = {\n  people: Person[],\n};\n\nconst COLUMNS = ['name', 'sex', 'born', 'died'];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { peopleSlug } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {COLUMNS.map(column => (\n            <TableColumn title={column} key={column} />\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classNames({\n                'has-background-warning': person.slug === peopleSlug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.mother\n                  ? (<PersonLink person={person.mother} />)\n                  : person.motherName}\n              </td>\n              <td>\n                {person.father !== undefined\n                  ? (<PersonLink person={person.father} />)\n                  : person.fatherName}\n              </td>\n            </tr>\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\ninterface FilterParams {\n  sex: string | null,\n  centuries: string[] | null,\n  input: string | null,\n  sort: keyof Person | null,\n  order: string | null,\n}\n\ntype Prepare = (\n  people: Person[],\n  filterParams: FilterParams,\n) => Person[];\n\nconst preparePeople: Prepare = (people, {\n  sex,\n  centuries,\n  input,\n  sort,\n  order,\n}) => {\n  return people\n    .map((person) => {\n      return {\n        ...person,\n        motherName: person.motherName || '-',\n        fatherName: person.fatherName || '-',\n        mother: people.find(mother => mother.name === person.motherName),\n        father: people.find(father => father.name === person.fatherName),\n      };\n    })\n\n    .filter(person => {\n      const isSexValid = sex === null ? true : person.sex === sex;\n\n      const isCenturyValid = centuries === null || !centuries?.length\n        ? true\n        : centuries.includes(Math.ceil(person.born / 100).toString());\n\n      const isNameValid = input === null\n        ? true\n        : person.name.toLowerCase().includes(input.toLowerCase());\n\n      return isSexValid && isCenturyValid && isNameValid;\n    })\n    .sort((person1, person2) => {\n      if (sort) {\n        const field1 = person1[sort];\n        const field2 = person2[sort];\n\n        if (typeof field1 === 'number' && typeof field2 === 'number') {\n          return order === null\n            ? field1 - field2\n            : field2 - field1;\n        }\n\n        if (typeof field1 === 'string' && typeof field2 === 'string') {\n          return order === null\n            ? field1.localeCompare(field2)\n            : field2.localeCompare(field1);\n        }\n      }\n\n      return 0;\n    });\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const preparedPeople = useMemo(() => {\n    const filterParams: FilterParams = {\n      sex: searchParams.get('sex'),\n      centuries: searchParams.getAll('centuries'),\n      input: searchParams.get('input'),\n      sort: searchParams.get('sort') as keyof Person,\n      order: searchParams.get('order'),\n    };\n\n    return preparePeople(people, filterParams);\n  }, [searchParams, people]);\n\n  const isDataEmpty = useMemo(() => {\n    return !isError && !isLoading && preparedPeople.length === 0;\n  }, [isError, isLoading, preparedPeople]);\n\n  const isDataPrepared = useMemo(() => {\n    return !isError && !isLoading && preparedPeople.length > 0;\n  }, [isError, isLoading, preparedPeople]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    getPeople()\n      .then(data => {\n        setPeople(preparePeople(\n          data,\n          {\n            sex: null, centuries: null, input: null, sort: null, order: null,\n          },\n        ));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n\n              {isLoading && (<Loader />)}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {isDataEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {/* <p>There are no people matching the current search criteria</p> */}\n\n              {isDataPrepared && (\n                <PeopleTable people={preparedPeople} />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const ErrorPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import {\n  HashRouter as Router, Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\n\nimport { PeoplePage } from './components/PeoplePage';\nimport { ErrorPage } from './components/ErrorPage';\nimport { HomePage } from './components/HomePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"*\" element={<ErrorPage />} />\n\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":peopleSlug\" element={<PeoplePage />} />\n          </Route>\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}